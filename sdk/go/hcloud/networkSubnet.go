// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.
type NetworkSubnet struct {
	pulumi.CustomResourceState

	Gateway     pulumi.StringOutput `pulumi:"gateway"`
	IpRange     pulumi.StringOutput `pulumi:"ipRange"`
	NetworkId   pulumi.IntOutput    `pulumi:"networkId"`
	NetworkZone pulumi.StringOutput `pulumi:"networkZone"`
	Type        pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkSubnet registers a new resource with the given unique name, arguments, and options.
func NewNetworkSubnet(ctx *pulumi.Context,
	name string, args *NetworkSubnetArgs, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	if args == nil || args.IpRange == nil {
		return nil, errors.New("missing required argument 'IpRange'")
	}
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	if args == nil || args.NetworkZone == nil {
		return nil, errors.New("missing required argument 'NetworkZone'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &NetworkSubnetArgs{}
	}
	var resource NetworkSubnet
	err := ctx.RegisterResource("hcloud:index/networkSubnet:NetworkSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSubnet gets an existing NetworkSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSubnetState, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	var resource NetworkSubnet
	err := ctx.ReadResource("hcloud:index/networkSubnet:NetworkSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSubnet resources.
type networkSubnetState struct {
	Gateway     *string `pulumi:"gateway"`
	IpRange     *string `pulumi:"ipRange"`
	NetworkId   *int    `pulumi:"networkId"`
	NetworkZone *string `pulumi:"networkZone"`
	Type        *string `pulumi:"type"`
}

type NetworkSubnetState struct {
	Gateway     pulumi.StringPtrInput
	IpRange     pulumi.StringPtrInput
	NetworkId   pulumi.IntPtrInput
	NetworkZone pulumi.StringPtrInput
	Type        pulumi.StringPtrInput
}

func (NetworkSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetState)(nil)).Elem()
}

type networkSubnetArgs struct {
	IpRange     string `pulumi:"ipRange"`
	NetworkId   int    `pulumi:"networkId"`
	NetworkZone string `pulumi:"networkZone"`
	Type        string `pulumi:"type"`
}

// The set of arguments for constructing a NetworkSubnet resource.
type NetworkSubnetArgs struct {
	IpRange     pulumi.StringInput
	NetworkId   pulumi.IntInput
	NetworkZone pulumi.StringInput
	Type        pulumi.StringInput
}

func (NetworkSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetArgs)(nil)).Elem()
}
