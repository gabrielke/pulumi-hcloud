// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.
type FloatingIp struct {
	pulumi.CustomResourceState

	Description  pulumi.StringPtrOutput `pulumi:"description"`
	HomeLocation pulumi.StringOutput    `pulumi:"homeLocation"`
	IpAddress    pulumi.StringOutput    `pulumi:"ipAddress"`
	IpNetwork    pulumi.StringOutput    `pulumi:"ipNetwork"`
	Labels       pulumi.MapOutput       `pulumi:"labels"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	ServerId     pulumi.IntOutput       `pulumi:"serverId"`
	Type         pulumi.StringOutput    `pulumi:"type"`
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &FloatingIpArgs{}
	}
	var resource FloatingIp
	err := ctx.RegisterResource("hcloud:index/floatingIp:FloatingIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIpState, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	var resource FloatingIp
	err := ctx.ReadResource("hcloud:index/floatingIp:FloatingIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIp resources.
type floatingIpState struct {
	Description  *string                `pulumi:"description"`
	HomeLocation *string                `pulumi:"homeLocation"`
	IpAddress    *string                `pulumi:"ipAddress"`
	IpNetwork    *string                `pulumi:"ipNetwork"`
	Labels       map[string]interface{} `pulumi:"labels"`
	Name         *string                `pulumi:"name"`
	ServerId     *int                   `pulumi:"serverId"`
	Type         *string                `pulumi:"type"`
}

type FloatingIpState struct {
	Description  pulumi.StringPtrInput
	HomeLocation pulumi.StringPtrInput
	IpAddress    pulumi.StringPtrInput
	IpNetwork    pulumi.StringPtrInput
	Labels       pulumi.MapInput
	Name         pulumi.StringPtrInput
	ServerId     pulumi.IntPtrInput
	Type         pulumi.StringPtrInput
}

func (FloatingIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpState)(nil)).Elem()
}

type floatingIpArgs struct {
	Description  *string                `pulumi:"description"`
	HomeLocation *string                `pulumi:"homeLocation"`
	Labels       map[string]interface{} `pulumi:"labels"`
	Name         *string                `pulumi:"name"`
	ServerId     *int                   `pulumi:"serverId"`
	Type         string                 `pulumi:"type"`
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	Description  pulumi.StringPtrInput
	HomeLocation pulumi.StringPtrInput
	Labels       pulumi.MapInput
	Name         pulumi.StringPtrInput
	ServerId     pulumi.IntPtrInput
	Type         pulumi.StringInput
}

func (FloatingIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpArgs)(nil)).Elem()
}
