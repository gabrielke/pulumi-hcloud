// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud volume resource to manage volumes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		node1, err := hcloud.NewServer(ctx, "node1", &hcloud.ServerArgs{
// 			Image:      pulumi.String("debian-9"),
// 			ServerType: pulumi.String("cx11"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.NewVolume(ctx, "master", &hcloud.VolumeArgs{
// 			Automount: pulumi.Bool(true),
// 			ServerId:  node1.ID(),
// 			Size:      pulumi.Int(50),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Volume struct {
	pulumi.CustomResourceState

	Automount   pulumi.BoolPtrOutput   `pulumi:"automount"`
	Format      pulumi.StringPtrOutput `pulumi:"format"`
	Labels      pulumi.MapOutput       `pulumi:"labels"`
	LinuxDevice pulumi.StringOutput    `pulumi:"linuxDevice"`
	Location    pulumi.StringOutput    `pulumi:"location"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ServerId    pulumi.IntOutput       `pulumi:"serverId"`
	Size        pulumi.IntOutput       `pulumi:"size"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil {
		args = &VolumeArgs{}
	}
	var resource Volume
	err := ctx.RegisterResource("hcloud:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("hcloud:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	Automount   *bool                  `pulumi:"automount"`
	Format      *string                `pulumi:"format"`
	Labels      map[string]interface{} `pulumi:"labels"`
	LinuxDevice *string                `pulumi:"linuxDevice"`
	Location    *string                `pulumi:"location"`
	Name        *string                `pulumi:"name"`
	ServerId    *int                   `pulumi:"serverId"`
	Size        *int                   `pulumi:"size"`
}

type VolumeState struct {
	Automount   pulumi.BoolPtrInput
	Format      pulumi.StringPtrInput
	Labels      pulumi.MapInput
	LinuxDevice pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ServerId    pulumi.IntPtrInput
	Size        pulumi.IntPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	Automount *bool                  `pulumi:"automount"`
	Format    *string                `pulumi:"format"`
	Labels    map[string]interface{} `pulumi:"labels"`
	Location  *string                `pulumi:"location"`
	Name      *string                `pulumi:"name"`
	ServerId  *int                   `pulumi:"serverId"`
	Size      int                    `pulumi:"size"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	Automount pulumi.BoolPtrInput
	Format    pulumi.StringPtrInput
	Labels    pulumi.MapInput
	Location  pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	ServerId  pulumi.IntPtrInput
	Size      pulumi.IntInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}
