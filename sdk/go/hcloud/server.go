// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	// Deprecated: You should remove this property from your terraform configuration.
	BackupWindow pulumi.StringOutput      `pulumi:"backupWindow"`
	Backups      pulumi.BoolPtrOutput     `pulumi:"backups"`
	Datacenter   pulumi.StringOutput      `pulumi:"datacenter"`
	Image        pulumi.StringOutput      `pulumi:"image"`
	Ipv4Address  pulumi.StringOutput      `pulumi:"ipv4Address"`
	Ipv6Address  pulumi.StringOutput      `pulumi:"ipv6Address"`
	Ipv6Network  pulumi.StringOutput      `pulumi:"ipv6Network"`
	Iso          pulumi.StringPtrOutput   `pulumi:"iso"`
	KeepDisk     pulumi.BoolPtrOutput     `pulumi:"keepDisk"`
	Labels       pulumi.MapOutput         `pulumi:"labels"`
	Location     pulumi.StringOutput      `pulumi:"location"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	Rescue       pulumi.StringPtrOutput   `pulumi:"rescue"`
	ServerType   pulumi.StringOutput      `pulumi:"serverType"`
	SshKeys      pulumi.StringArrayOutput `pulumi:"sshKeys"`
	Status       pulumi.StringOutput      `pulumi:"status"`
	UserData     pulumi.StringPtrOutput   `pulumi:"userData"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil || args.Image == nil {
		return nil, errors.New("missing required argument 'Image'")
	}
	if args == nil || args.ServerType == nil {
		return nil, errors.New("missing required argument 'ServerType'")
	}
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("hcloud:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("hcloud:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Deprecated: You should remove this property from your terraform configuration.
	BackupWindow *string                `pulumi:"backupWindow"`
	Backups      *bool                  `pulumi:"backups"`
	Datacenter   *string                `pulumi:"datacenter"`
	Image        *string                `pulumi:"image"`
	Ipv4Address  *string                `pulumi:"ipv4Address"`
	Ipv6Address  *string                `pulumi:"ipv6Address"`
	Ipv6Network  *string                `pulumi:"ipv6Network"`
	Iso          *string                `pulumi:"iso"`
	KeepDisk     *bool                  `pulumi:"keepDisk"`
	Labels       map[string]interface{} `pulumi:"labels"`
	Location     *string                `pulumi:"location"`
	Name         *string                `pulumi:"name"`
	Rescue       *string                `pulumi:"rescue"`
	ServerType   *string                `pulumi:"serverType"`
	SshKeys      []string               `pulumi:"sshKeys"`
	Status       *string                `pulumi:"status"`
	UserData     *string                `pulumi:"userData"`
}

type ServerState struct {
	// Deprecated: You should remove this property from your terraform configuration.
	BackupWindow pulumi.StringPtrInput
	Backups      pulumi.BoolPtrInput
	Datacenter   pulumi.StringPtrInput
	Image        pulumi.StringPtrInput
	Ipv4Address  pulumi.StringPtrInput
	Ipv6Address  pulumi.StringPtrInput
	Ipv6Network  pulumi.StringPtrInput
	Iso          pulumi.StringPtrInput
	KeepDisk     pulumi.BoolPtrInput
	Labels       pulumi.MapInput
	Location     pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Rescue       pulumi.StringPtrInput
	ServerType   pulumi.StringPtrInput
	SshKeys      pulumi.StringArrayInput
	Status       pulumi.StringPtrInput
	UserData     pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	Backups    *bool                  `pulumi:"backups"`
	Datacenter *string                `pulumi:"datacenter"`
	Image      string                 `pulumi:"image"`
	Iso        *string                `pulumi:"iso"`
	KeepDisk   *bool                  `pulumi:"keepDisk"`
	Labels     map[string]interface{} `pulumi:"labels"`
	Location   *string                `pulumi:"location"`
	Name       *string                `pulumi:"name"`
	Rescue     *string                `pulumi:"rescue"`
	ServerType string                 `pulumi:"serverType"`
	SshKeys    []string               `pulumi:"sshKeys"`
	UserData   *string                `pulumi:"userData"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	Backups    pulumi.BoolPtrInput
	Datacenter pulumi.StringPtrInput
	Image      pulumi.StringInput
	Iso        pulumi.StringPtrInput
	KeepDisk   pulumi.BoolPtrInput
	Labels     pulumi.MapInput
	Location   pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Rescue     pulumi.StringPtrInput
	ServerType pulumi.StringInput
	SshKeys    pulumi.StringArrayInput
	UserData   pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}
