// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

//   Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
type LoadBalancer struct {
	pulumi.CustomResourceState

	Algorithm        LoadBalancerAlgorithmOutput       `pulumi:"algorithm"`
	Ipv4             pulumi.StringOutput               `pulumi:"ipv4"`
	Ipv6             pulumi.StringOutput               `pulumi:"ipv6"`
	Labels           pulumi.MapOutput                  `pulumi:"labels"`
	LoadBalancerType pulumi.StringOutput               `pulumi:"loadBalancerType"`
	Location         pulumi.StringOutput               `pulumi:"location"`
	Name             pulumi.StringOutput               `pulumi:"name"`
	NetworkId        pulumi.IntOutput                  `pulumi:"networkId"`
	NetworkIp        pulumi.StringOutput               `pulumi:"networkIp"`
	NetworkZone      pulumi.StringOutput               `pulumi:"networkZone"`
	Targets          LoadBalancerTargetTypeArrayOutput `pulumi:"targets"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil || args.LoadBalancerType == nil {
		return nil, errors.New("missing required argument 'LoadBalancerType'")
	}
	if args == nil {
		args = &LoadBalancerArgs{}
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("hcloud:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("hcloud:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	Algorithm        *LoadBalancerAlgorithm   `pulumi:"algorithm"`
	Ipv4             *string                  `pulumi:"ipv4"`
	Ipv6             *string                  `pulumi:"ipv6"`
	Labels           map[string]interface{}   `pulumi:"labels"`
	LoadBalancerType *string                  `pulumi:"loadBalancerType"`
	Location         *string                  `pulumi:"location"`
	Name             *string                  `pulumi:"name"`
	NetworkId        *int                     `pulumi:"networkId"`
	NetworkIp        *string                  `pulumi:"networkIp"`
	NetworkZone      *string                  `pulumi:"networkZone"`
	Targets          []LoadBalancerTargetType `pulumi:"targets"`
}

type LoadBalancerState struct {
	Algorithm        LoadBalancerAlgorithmPtrInput
	Ipv4             pulumi.StringPtrInput
	Ipv6             pulumi.StringPtrInput
	Labels           pulumi.MapInput
	LoadBalancerType pulumi.StringPtrInput
	Location         pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NetworkId        pulumi.IntPtrInput
	NetworkIp        pulumi.StringPtrInput
	NetworkZone      pulumi.StringPtrInput
	Targets          LoadBalancerTargetTypeArrayInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	Algorithm        *LoadBalancerAlgorithm   `pulumi:"algorithm"`
	Labels           map[string]interface{}   `pulumi:"labels"`
	LoadBalancerType string                   `pulumi:"loadBalancerType"`
	Location         *string                  `pulumi:"location"`
	Name             *string                  `pulumi:"name"`
	NetworkZone      *string                  `pulumi:"networkZone"`
	Targets          []LoadBalancerTargetType `pulumi:"targets"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	Algorithm        LoadBalancerAlgorithmPtrInput
	Labels           pulumi.MapInput
	LoadBalancerType pulumi.StringInput
	Location         pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NetworkZone      pulumi.StringPtrInput
	Targets          LoadBalancerTargetTypeArrayInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}
