// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Adds a target to a Hetzner Cloud Load Balancer.
type LoadBalancerTarget struct {
	pulumi.CustomResourceState

	LoadBalancerId pulumi.IntOutput    `pulumi:"loadBalancerId"`
	ServerId       pulumi.IntPtrOutput `pulumi:"serverId"`
	Type           pulumi.StringOutput `pulumi:"type"`
	UsePrivateIp   pulumi.BoolOutput   `pulumi:"usePrivateIp"`
}

// NewLoadBalancerTarget registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerTarget(ctx *pulumi.Context,
	name string, args *LoadBalancerTargetArgs, opts ...pulumi.ResourceOption) (*LoadBalancerTarget, error) {
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &LoadBalancerTargetArgs{}
	}
	var resource LoadBalancerTarget
	err := ctx.RegisterResource("hcloud:index/loadBalancerTarget:LoadBalancerTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerTarget gets an existing LoadBalancerTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerTargetState, opts ...pulumi.ResourceOption) (*LoadBalancerTarget, error) {
	var resource LoadBalancerTarget
	err := ctx.ReadResource("hcloud:index/loadBalancerTarget:LoadBalancerTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerTarget resources.
type loadBalancerTargetState struct {
	LoadBalancerId *int    `pulumi:"loadBalancerId"`
	ServerId       *int    `pulumi:"serverId"`
	Type           *string `pulumi:"type"`
	UsePrivateIp   *bool   `pulumi:"usePrivateIp"`
}

type LoadBalancerTargetState struct {
	LoadBalancerId pulumi.IntPtrInput
	ServerId       pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	UsePrivateIp   pulumi.BoolPtrInput
}

func (LoadBalancerTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerTargetState)(nil)).Elem()
}

type loadBalancerTargetArgs struct {
	LoadBalancerId int    `pulumi:"loadBalancerId"`
	ServerId       *int   `pulumi:"serverId"`
	Type           string `pulumi:"type"`
	UsePrivateIp   *bool  `pulumi:"usePrivateIp"`
}

// The set of arguments for constructing a LoadBalancerTarget resource.
type LoadBalancerTargetArgs struct {
	LoadBalancerId pulumi.IntInput
	ServerId       pulumi.IntPtrInput
	Type           pulumi.StringInput
	UsePrivateIp   pulumi.BoolPtrInput
}

func (LoadBalancerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerTargetArgs)(nil)).Elem()
}
