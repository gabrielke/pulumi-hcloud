// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.
type Rdns struct {
	pulumi.CustomResourceState

	DnsPtr       pulumi.StringOutput `pulumi:"dnsPtr"`
	FloatingIpId pulumi.IntPtrOutput `pulumi:"floatingIpId"`
	IpAddress    pulumi.StringOutput `pulumi:"ipAddress"`
	ServerId     pulumi.IntPtrOutput `pulumi:"serverId"`
}

// NewRdns registers a new resource with the given unique name, arguments, and options.
func NewRdns(ctx *pulumi.Context,
	name string, args *RdnsArgs, opts ...pulumi.ResourceOption) (*Rdns, error) {
	if args == nil || args.DnsPtr == nil {
		return nil, errors.New("missing required argument 'DnsPtr'")
	}
	if args == nil || args.IpAddress == nil {
		return nil, errors.New("missing required argument 'IpAddress'")
	}
	if args == nil {
		args = &RdnsArgs{}
	}
	var resource Rdns
	err := ctx.RegisterResource("hcloud:index/rdns:Rdns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdns gets an existing Rdns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdnsState, opts ...pulumi.ResourceOption) (*Rdns, error) {
	var resource Rdns
	err := ctx.ReadResource("hcloud:index/rdns:Rdns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rdns resources.
type rdnsState struct {
	DnsPtr       *string `pulumi:"dnsPtr"`
	FloatingIpId *int    `pulumi:"floatingIpId"`
	IpAddress    *string `pulumi:"ipAddress"`
	ServerId     *int    `pulumi:"serverId"`
}

type RdnsState struct {
	DnsPtr       pulumi.StringPtrInput
	FloatingIpId pulumi.IntPtrInput
	IpAddress    pulumi.StringPtrInput
	ServerId     pulumi.IntPtrInput
}

func (RdnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdnsState)(nil)).Elem()
}

type rdnsArgs struct {
	DnsPtr       string `pulumi:"dnsPtr"`
	FloatingIpId *int   `pulumi:"floatingIpId"`
	IpAddress    string `pulumi:"ipAddress"`
	ServerId     *int   `pulumi:"serverId"`
}

// The set of arguments for constructing a Rdns resource.
type RdnsArgs struct {
	DnsPtr       pulumi.StringInput
	FloatingIpId pulumi.IntPtrInput
	IpAddress    pulumi.StringInput
	ServerId     pulumi.IntPtrInput
}

func (RdnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdnsArgs)(nil)).Elem()
}
