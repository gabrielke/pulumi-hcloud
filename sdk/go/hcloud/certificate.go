// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Clould Certificate to represent a TLS certificate in the Hetzner Cloud.
type Certificate struct {
	pulumi.CustomResourceState

	Certificate    pulumi.StringOutput      `pulumi:"certificate"`
	Created        pulumi.StringOutput      `pulumi:"created"`
	DomainNames    pulumi.StringArrayOutput `pulumi:"domainNames"`
	Fingerprint    pulumi.StringOutput      `pulumi:"fingerprint"`
	Labels         pulumi.MapOutput         `pulumi:"labels"`
	Name           pulumi.StringOutput      `pulumi:"name"`
	NotValidAfter  pulumi.StringOutput      `pulumi:"notValidAfter"`
	NotValidBefore pulumi.StringOutput      `pulumi:"notValidBefore"`
	PrivateKey     pulumi.StringOutput      `pulumi:"privateKey"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.PrivateKey == nil {
		return nil, errors.New("missing required argument 'PrivateKey'")
	}
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("hcloud:index/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("hcloud:index/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	Certificate    *string                `pulumi:"certificate"`
	Created        *string                `pulumi:"created"`
	DomainNames    []string               `pulumi:"domainNames"`
	Fingerprint    *string                `pulumi:"fingerprint"`
	Labels         map[string]interface{} `pulumi:"labels"`
	Name           *string                `pulumi:"name"`
	NotValidAfter  *string                `pulumi:"notValidAfter"`
	NotValidBefore *string                `pulumi:"notValidBefore"`
	PrivateKey     *string                `pulumi:"privateKey"`
}

type CertificateState struct {
	Certificate    pulumi.StringPtrInput
	Created        pulumi.StringPtrInput
	DomainNames    pulumi.StringArrayInput
	Fingerprint    pulumi.StringPtrInput
	Labels         pulumi.MapInput
	Name           pulumi.StringPtrInput
	NotValidAfter  pulumi.StringPtrInput
	NotValidBefore pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	Certificate string                 `pulumi:"certificate"`
	Labels      map[string]interface{} `pulumi:"labels"`
	Name        *string                `pulumi:"name"`
	PrivateKey  string                 `pulumi:"privateKey"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	Certificate pulumi.StringInput
	Labels      pulumi.MapInput
	Name        pulumi.StringPtrInput
	PrivateKey  pulumi.StringInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}
