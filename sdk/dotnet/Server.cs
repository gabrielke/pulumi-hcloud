// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public partial class Server : Pulumi.CustomResource
    {
        [Output("backupWindow")]
        public Output<string> BackupWindow { get; private set; } = null!;

        [Output("backups")]
        public Output<bool?> Backups { get; private set; } = null!;

        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        [Output("ipv4Address")]
        public Output<string> Ipv4Address { get; private set; } = null!;

        [Output("ipv6Address")]
        public Output<string> Ipv6Address { get; private set; } = null!;

        [Output("ipv6Network")]
        public Output<string> Ipv6Network { get; private set; } = null!;

        [Output("iso")]
        public Output<string?> Iso { get; private set; } = null!;

        [Output("keepDisk")]
        public Output<bool?> KeepDisk { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, object>?> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("rescue")]
        public Output<string?> Rescue { get; private set; } = null!;

        [Output("serverType")]
        public Output<string> ServerType { get; private set; } = null!;

        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("hcloud:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("hcloud:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : Pulumi.ResourceArgs
    {
        [Input("backups")]
        public Input<bool>? Backups { get; set; }

        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("keepDisk")]
        public Input<bool>? KeepDisk { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rescue")]
        public Input<string>? Rescue { get; set; }

        [Input("serverType", required: true)]
        public Input<string> ServerType { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerArgs()
        {
        }
    }

    public sealed class ServerState : Pulumi.ResourceArgs
    {
        [Input("backupWindow")]
        public Input<string>? BackupWindow { get; set; }

        [Input("backups")]
        public Input<bool>? Backups { get; set; }

        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        [Input("ipv6Network")]
        public Input<string>? Ipv6Network { get; set; }

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("keepDisk")]
        public Input<bool>? KeepDisk { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rescue")]
        public Input<string>? Rescue { get; set; }

        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerState()
        {
        }
    }
}
