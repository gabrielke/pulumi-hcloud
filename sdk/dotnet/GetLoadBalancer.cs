// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetLoadBalancer
    {
        /// <summary>
        ///     Provides details about a specific Hetzner Cloud Server.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("hcloud:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithVersion());
    }


    public sealed class GetLoadBalancerArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("withSelector")]
        public string? WithSelector { get; set; }

        public GetLoadBalancerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly Outputs.GetLoadBalancerAlgorithmResult Algorithm;
        public readonly int? Id;
        public readonly string Ipv4;
        public readonly string Ipv6;
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string LoadBalancerType;
        public readonly string Location;
        public readonly string? Name;
        public readonly string NetworkZone;
        public readonly ImmutableArray<Outputs.GetLoadBalancerServiceResult> Services;
        public readonly ImmutableArray<Outputs.GetLoadBalancerTargetResult> Targets;
        public readonly string? WithSelector;

        [OutputConstructor]
        private GetLoadBalancerResult(
            Outputs.GetLoadBalancerAlgorithmResult algorithm,

            int? id,

            string ipv4,

            string ipv6,

            ImmutableDictionary<string, object> labels,

            string loadBalancerType,

            string location,

            string? name,

            string networkZone,

            ImmutableArray<Outputs.GetLoadBalancerServiceResult> services,

            ImmutableArray<Outputs.GetLoadBalancerTargetResult> targets,

            string? withSelector)
        {
            Algorithm = algorithm;
            Id = id;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            Labels = labels;
            LoadBalancerType = loadBalancerType;
            Location = location;
            Name = name;
            NetworkZone = networkZone;
            Services = services;
            Targets = targets;
            WithSelector = withSelector;
        }
    }
}
