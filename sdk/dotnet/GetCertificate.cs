// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetCertificate
    {
        /// <summary>
        /// Provides details about a specific Hetzner Cloud Certificate.
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("hcloud:index/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithVersion());
    }


    public sealed class GetCertificateArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("withSelector")]
        public string? WithSelector { get; set; }

        public GetCertificateArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        public readonly string Certificate;
        public readonly string Created;
        public readonly ImmutableArray<string> DomainNames;
        public readonly string Fingerprint;
        public readonly int? Id;
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string? Name;
        public readonly string NotValidAfter;
        public readonly string NotValidBefore;
        public readonly string? WithSelector;

        [OutputConstructor]
        private GetCertificateResult(
            string certificate,

            string created,

            ImmutableArray<string> domainNames,

            string fingerprint,

            int? id,

            ImmutableDictionary<string, object> labels,

            string? name,

            string notValidAfter,

            string notValidBefore,

            string? withSelector)
        {
            Certificate = certificate;
            Created = created;
            DomainNames = domainNames;
            Fingerprint = fingerprint;
            Id = id;
            Labels = labels;
            Name = name;
            NotValidAfter = notValidAfter;
            NotValidBefore = notValidBefore;
            WithSelector = withSelector;
        }
    }
}
