// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetServer
    {
        public static Task<GetServerResult> InvokeAsync(GetServerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("hcloud:index/getServer:getServer", args ?? new GetServerArgs(), options.WithVersion());
    }


    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("selector")]
        public string? Selector { get; set; }

        [Input("withSelector")]
        public string? WithSelector { get; set; }

        [Input("withStatuses")]
        private List<string>? _withStatuses;
        public List<string> WithStatuses
        {
            get => _withStatuses ?? (_withStatuses = new List<string>());
            set => _withStatuses = value;
        }

        public GetServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string BackupWindow;
        public readonly bool Backups;
        public readonly string Datacenter;
        public readonly int Id;
        public readonly string Image;
        public readonly string Ipv4Address;
        public readonly string Ipv6Address;
        public readonly string Ipv6Network;
        public readonly string Iso;
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Location;
        public readonly string Name;
        public readonly string Rescue;
        public readonly string? Selector;
        public readonly string ServerType;
        public readonly string Status;
        public readonly string? WithSelector;
        public readonly ImmutableArray<string> WithStatuses;

        [OutputConstructor]
        private GetServerResult(
            string backupWindow,

            bool backups,

            string datacenter,

            int id,

            string image,

            string ipv4Address,

            string ipv6Address,

            string ipv6Network,

            string iso,

            ImmutableDictionary<string, object> labels,

            string location,

            string name,

            string rescue,

            string? selector,

            string serverType,

            string status,

            string? withSelector,

            ImmutableArray<string> withStatuses)
        {
            BackupWindow = backupWindow;
            Backups = backups;
            Datacenter = datacenter;
            Id = id;
            Image = image;
            Ipv4Address = ipv4Address;
            Ipv6Address = ipv6Address;
            Ipv6Network = ipv6Network;
            Iso = iso;
            Labels = labels;
            Location = location;
            Name = name;
            Rescue = rescue;
            Selector = selector;
            ServerType = serverType;
            Status = status;
            WithSelector = withSelector;
            WithStatuses = withStatuses;
        }
    }
}
